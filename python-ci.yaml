version: 2.1
description: Tools for testing Python projects.

commands:

  run-with-coverage:
    parameters:
      command:
        type: string
    steps:
      - run:
          name: "Run Tests"
          command: |
            python --version
            mkdir -p coverage_output
            export COVERAGE_FILE=coverage_output/.coverage.$CIRCLE_BUILD_NUM
            << parameters.command >>
      - persist_to_workspace:
          root: coverage_output
          paths:
            - .coverage.*

  pip-install:
    parameters:
      extra_packages:
        type: string
        default: ""
      editable:
        type: boolean
        default: false
      package:
        type: string
        default: "."
      extras:
        type: string
        default: ""
    steps:
      - run:
          name: "Add .local/bin to $PATH"
          command: |
             echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
             source $HOME/.bashrc
      - run:
          name: "Install Project"
          command: "pip install --user << parameters.extra_packages >> <<# parameters.editable >>-e <</ parameters.editable >><< parameters.package >><< parameters.extras >>"

  pip-run-tests:
    parameters:
      prepare:
        type: steps
        default: []
      command:
        type: string
        default: pytest --cov
      extra_packages:
        type: string
        default: ""
    steps:
      - checkout
      - pip-install:
          editable: true
          extra_packages: << parameters.extra_packages >>
          extras: "[test]"
      - steps: << parameters.prepare >>
      - run-with-coverage:
          command: << parameters.command >>

  poetry-run-tests:
    parameters:
      prepare:
        type: steps
        default: []
      command:
        type: string
        default: poetry run pytest --cov
    steps:
      - checkout
      - run:
          name: "Install Project"
          command: poetry install
      - steps: << parameters.prepare >>
      - run-with-coverage:
          command: << parameters.command >>

  check-package:
    parameters:
      package:
        type: string
      test:
        type: steps
      extra_packages:
        type: string
        default: ""
      expect_changelog:
        type: boolean
        default: true
      editable:
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: dist
      - run:
          name: "Check LICENSE in wheel"
          command: "unzip -l dist/*.whl | grep LICENSE"
      - run:
          name: "Check LICENSE in source dist"
          command: "tar tzf dist/*.tar.gz | grep LICENSE"
      - when:
          condition: << parameters.expect_changelog >>
          steps:
            - run:
                name: "Check CHANGELOG in source dist"
                command: "tar tzf dist/*.tar.gz | grep CHANGELOG"
      - pip-install:
          package: "dist/*.whl"
          extra_packages: << parameters.extra_packages >>
      - steps: << parameters.test >>
      - run:
          name: "Uninstall wheel"
          command: "pip uninstall -y << parameters.package >>"
      - pip-install:
          extra_packages: << parameters.extra_packages >>
          package: "dist/*.tar.gz"
      - steps: << parameters.test >>

jobs:

  pip-run-tests:
    parameters:
      image:
        type: string
      prepare:
        type: steps
        default: []
      command:
        type: string
        default: pytest --cov
      extra_packages:
        type: string
        default: ""
    docker:
      - image: << parameters.image >>
    steps:
      - pip-run-tests:
          prepare: << parameters.prepare >>
          command: << parameters.command >>
          extra_packages: << parameters.extra_packages >>

  pip-docs:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - pip-install:
          editable: true
          extras: "[docs]"
      - run:
          name: "Build Docs"
          command: |
            python setup.py build_sphinx -W --keep-going
            rst2html.py --strict README.rst README.html
      - store_artifacts:
          path: build/sphinx/html
          destination: docs

  pip-setuptools-build-package:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - pip-install:
          editable: true
          extras: "[build]"
      - run:
          name: "Build Distributions"
          command: "python setup.py sdist bdist_wheel"
      - persist_to_workspace:
          root: dist
          paths:
            - "*"
      - store_artifacts:
          path: dist
          destination: dist

  poetry-run-tests:
    parameters:
      image:
        type: string
      command:
        type: string
        default: poetry run pytest --cov
      prepare:
        type: steps
        default: []
    docker:
      - image: << parameters.image >>
    steps:
      - poetry-run-tests:
          prepare: << parameters.prepare >>
          command: << parameters.command >>

  poetry-build-package:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: "Build Distributions"
          command: "poetry build"
      - persist_to_workspace:
          root: dist
          paths:
            - "*"
      - store_artifacts:
          path: dist
          destination: dist

  coverage:
    parameters:
      image:
        type: string
        default: circleci/python:3.8
    docker:
      - image: << parameters.image >>
    steps:
      - checkout
      - attach_workspace:
          at: coverage_output
      - run:
          name: "Check coverage"
          command: |
            sudo pip install coverage
            coverage combine coverage_output/
            coverage report --show-missing --fail-under=100

  release:
    parameters:
      config:
        type: string
        default: pyproject.toml
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: "Shows Distributions"
          command: "ls -lah dist"
      - run:
          name: "Release"
          command: |
            sudo pip install carthorse
            carthorse --config << parameters.config >>
